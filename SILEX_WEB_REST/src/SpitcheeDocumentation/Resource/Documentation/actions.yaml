actions:
    routeCategories:
      user:
        name: User
        description: -
        routes:
          - id: tmpRegister
            url: /user/temp/{role}/register
            method: POST
            description: S'enregistrer et recevoir ses identifiants
            auth: none
            success:
              code: 201
              content: entity__User
              details: Entité User
            params:
              json:
                - name: username
                  required: false
                  description: Pseudo d'utilisateur
              url:
                - name: role
                  required: true
                  description: Rôle de l'utilisateur, 'lecturer' ou 'agora'

          - id: tmpSpeakerRegister
            url: /user/temp/speaker/register
            method: POST
            description: Valider l'identifiant du speaker et recevoir le reste de ses informations
            details: Renvoie une entité User
            auth: none
            success:
              code: 200
              details: Entité user
              content: entity__User
            params:
              json:
                - name: id
                  required: true
                  description: Identifiant du speaker donné au conférencier quand il a créé la conf

          - id: wannaTalkRegister
            url: /user/wannaTalk
            method: POST
            description: Demander la parole
            auth: agora
            details: Erreur si il a déjà demandé la parole, et tant mieux car vous pouvez lui dire de ne pas spam
            success:
              code: 200


      conference:
        name: Conference
        description:
        routes:
          - id: createconf
            url: /conference/active/create
            method: POST
            description: Créer une conférence
            details: Engendre aussi la création du client speaker
            auth: conferencier
            success:
              code: 201
              content:
                conferenceId: String
                speakerId: String

          - id: subscribe
            url: /conference/active/{id}/subscribe
            method: POST
            description: S'inscrire à une conférence
            details: C'est à ce moment que vos identifiants SIP sont disponibles
            auth: agora
            success:
              code: 200
              details: Entité User
              content: entity__User
            params:
              url:
                - name: id
                  required: true
                  description: Id de la conférence

          - id: confDebug
            url: /conference/{id}/debug
            method: GET
            auth: none
            description: Récupérer les utilisateurs liés à une conférence
            details: Temporaire
            success:
              code: 200
              details: Array d'users
              content: array__entity__User

          - id: confKick
            url: /conference/active/kick/{userId}
            method: POST
            auth: conferencier
            description: Kick un utilisateur de l'appel
            details: Raccroche un utilisateur de l'appel. Ne peut se faire qu'entre 1/5 secondes après l'appel de cet utilisateur, à cause d'un bug d'Asterisk (protection dans la route)
            params:
              url:
                - name: userId
                  required: true
                  description: Id de l'user à appeller
            success:
             code: 200

          - id: confCallStart
            url: /conference/active/startCall
            method: POST
            auth: conferencier
            description: Lancer l'appel-conférence
            details: Relance l'appel de la conférence, en appelant le speaker. (Le speaker est automatiquement appelé quand il se co, c'est au cas où problème cette route)
            success:
              code: 200

          - id: confCallAgora
            url: /conference/active/call/{userId}
            method: POST
            auth: conferencier
            description: Ajouter un utilisateur à l'appel
            success:
              code: 200
      nami:
        name: Evénèments Asterisk
        description:
        routes:
          - id: fetchEvents
            url: /events
            method: GET
            auth: none
            description: Rechercher des events Asterisk
            details: Faite pour debug, pas besoin dans le processus de conférence
            params:
              url:
                - name: userId
                  required: false
                - name: sipId
                  required: false
                - name: conferenceId
                  required: false
                - name: type
                  required: false
                  description: Type de l'event PeerStatus ConfbridgeJoin ConfbridgeLeave Hangup... y'en a plein démerdez vous
                - name: limit
                  required: false
                  description: Limite le nombre de résultats. Défaut à 30
                - name: created
                  required: false
                  description: Date de création, format 'Y-m-d H:i:s'. Ca recherche en wildcard à droite, donc juste 2012 donnera tous les events de 2012
                - name: sortByCreated
                  required: false
                  description: Valeur DESC (descendant) ou ASC (ascendant), default ASC
            success:
              code: 200
              content: array__entity__NamiEvent
              details: Un array d'entités NamiEvent

